#include "ros/ros.h"
#include "std_msgs/MultiArrayLayout.h"
#include "std_msgs/MultiArrayDimension.h"
#include "std_msgs/Int32MultiArray.h"
#include <array>
#include <vector>
#include <fstream>

using namespace std;

int height, width;
std_msgs::Int32MultiArray arrayToSend;
unsigned char info[54];
unsigned char* data;
int size;
FILE* bmpFile;

void readFile(){
	bmpFile = fopen("/home/chris/Pictures/testAfbeelding.bmp", "rb"); // < PAD NAAR BITMAP!

	fread(info, sizeof(unsigned char), 54, bmpFile);
	size = ((width * 3 + 3) & (~3)) * height; //BMP - HEIGHT: *(int*)&info[22]  -  WIDTH:*(int*)&info[18]

	data = new unsigned char[size];
	fread(data, sizeof(unsigned char), size, bmpFile);
	fclose(bmpFile);
}

int main(int argc, char **argv) {
	ros::init(argc, argv, "pubVector");
	ros::NodeHandle n;
	ros::Publisher pub = n.advertise<std_msgs::Int32MultiArray>("array", 100);
	ros::Rate r(1);

	height = 300;	//Hoogte & Breedte zijn 300, omdat bitmap is 300x300 
	width = 300;	//300 is een Vaste Waarde!

	readFile();

	while (ros::ok()) {
		int i = 0;
		int pixelArray[height][width];
		std::vector<int> pixelvector((height * width), 0);
		std::ofstream outfile;
		//outfile.open("/home/chris/Desktop/info.txt", std::ios_base::app);
		//string line;

		arrayToSend.data.clear();
		arrayToSend.layout.dim.push_back(std_msgs::MultiArrayDimension());
		arrayToSend.layout.dim.push_back(std_msgs::MultiArrayDimension());

		ROS_INFO("Translating to map!");
		for (int a = 0; a < height; a++) {
			for (int q = 0; q < width; q++) {
				if ((int(data[i] & 0xFF) + int(data[i + 1] & 0xFF) + int(data[i + 2] & 0xFF)) > 0) {
					pixelvector[a*2+q] = 0;
				}
				else {
					pixelvector[a*2+q] = 1;
				}
				i = i + 3;
				//line.append(to_string(pixelvector[a * 2 + q]));
			}
			//outfile << line << endl;
			//line = "";
			ros::Duration(0.1).sleep();
		}

		arrayToSend.data = pixelvector;
		pub.publish(arrayToSend);

		ROS_INFO("I published a map!");
		ros::Duration(10.0).sleep();
		ros::spinOnce();

	}
	return 0;
}
