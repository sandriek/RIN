#include "ros/ros.h"
#include "std_msgs/MultiArrayLayout.h"
#include "std_msgs/MultiArrayDimension.h"
#include "std_msgs/Int32MultiArray.h"
#include <array>
#include <vector>
#include <fstream>

using namespace std;

int main(int argc, char **argv) {
	ros::init(argc, argv, "pubVector");
	ros::NodeHandle n;
	ros::Publisher pub = n.advertise<std_msgs::Int32MultiArray>("array", 100);
	ros::Rate r(1);

	std_msgs::Int32MultiArray array;

	FILE* f = fopen("/home/chris/Pictures/testAfbeelding.bmp", "rb");
	unsigned char info[54];
	fread(info, sizeof(unsigned char), 54, f);

	ROS_INFO("I read the file!");

	int size = ((*(int*)&info[18] * 3 + 3) & (~3)) * *(int*)&info[22]; //BMP - HEIGHT: *(int*)&info[22]  -  WIDTH:*(int*)&info[18]
	unsigned char* data = new unsigned char[size];
	fread(data, sizeof(unsigned char), size, f);
	fclose(f);

	ROS_INFO("I read the file and closed it!");

	vector< vector<int> > myVector;
	myVector.resize(*(int*)&info[22], vector<int>(*(int*)&info[18]));

	ROS_INFO("vector Built");

	while (ros::ok()) {
		uint32_t i = 0;
		int height,width;
		height = *(int*)&info[22];
		width = *(int*)&info[18];
		ROS_INFO("While started!");
		int pixelArray[*(int*)&info[22]][*(int*)&info[18]];

		array.data.clear();
		array.layout.dim.push_back(std_msgs::MultiArrayDimension());
		array.layout.dim.push_back(std_msgs::MultiArrayDimension());
		array.layout.dim[0].label = "height";
		array.layout.dim[1].label = "width";
		array.layout.dim[0].size = height;
		array.layout.dim[1].size = width;

		std::vector<int> pixelvector((height * width), 0);


		ROS_INFO("Starting to build array!");
		ROS_INFO("Height: %d , Width, %d", height, width);
		
		for (uint32_t a = 0; a < height; a++) {
				
			for (uint32_t q = 0; q < width; q++) {
				
				if ((int(data[i] & 0xFF) + int(data[i + 1] & 0xFF) + int(data[i + 2] & 0xFF)) > 0) {
					pixelArray[a][q] = 0;
				}
				else {
					pixelArray[a][q] = 1;
				}
				pixelvector[a*2+q] = pixelArray[a][q];
				i = i + 3;
				
				ROS_INFO("IN Loop %d --- %d --- %d",a, q ,i);
			}
		ros::Duration(0.1).sleep();
		}	
		ros::Duration(10.0).sleep();	
		array.data = pixelvector;
		ROS_INFO("I published a map!");
		ros::spinOnce();
	}
	return 0;
}

//OUDE CODE:
/*
 while (ros::ok()) {

  std_msgs::Int32MultiArray array;
  array.data.clear();

  //Fill Array:
  int intarray[2][3] = {
  {0, 1, 2},
  {11, 22, 33}};

  array.layout.dim.push_back(std_msgs::MultiArrayDimension());
  array.layout.dim.push_back(std_msgs::MultiArrayDimension());
  array.layout.dim[0].label = "height";
  array.layout.dim[1].label = "width";
  array.layout.dim[0].size = 2;
  array.layout.dim[1].size = 3;

  std::vector<int> vec(6, 0);

  for (int i=0; i<2; i++){
   for (int j=0; j<3; j++){
	vec[i*2 + j] = intarray[i][j];
   }
  }

  array.data = vec;


  pub.publish(array);
  ROS_INFO("I published Something!");
  ros::spinOnce();
  sleep(2);

 }
*/
