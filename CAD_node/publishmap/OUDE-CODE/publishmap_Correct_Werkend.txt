#include "ros/ros.h"
#include "std_msgs/MultiArrayLayout.h"
#include "std_msgs/MultiArrayDimension.h"
#include "std_msgs/Int32MultiArray.h"
#include <array>
#include <vector>
#include <fstream>

using namespace std;

int height = 300, width = 300;	// < Variabelen voor de breedte en hoogte van de bitmap. Deze staan vast omdat testomgeving 3mx3m is.
vector<int> pixelVector;	//Vector met daarin alle pixels van de bitmap, in deze vector staan waardes 0 of 1 (niet gevuld/gevuld).
vector<int> clusterVector;	//Vector met daarin de clusters van pixels, in deze vector staan waardes 0 of 1 (niet gevuld/gevuld.
std_msgs::Int32MultiArray pixelArrayToSend;	//Array met pixels die gepublished kan worden, deze komt van 'pixelVector'.
std_msgs::Int32MultiArray clusterArrayToSend;	//Array met clusters die gepublished kan worden, deze komt van 'clusterVector'.
unsigned char info[54];	//Info van de bitmap file opslaan
unsigned char* data;	//Data die in de bitmap staat opslaan
int size;		//Grootte van de bitmap file opslaan.
FILE* bmpFile;		//Verwijzing naar het bitmap bestand dat gebruikt gaat worden.

void readFile() {
	bmpFile = fopen("/home/chris/Desktop/vierkantRandom.bmp", "rb"); // < PAD NAAR BITMAP!

	fread(info, sizeof(unsigned char), 54, bmpFile);

	size = ((width * 3 + 3) & (~3)) * height; //BMP - HEIGHT: *(int*)&info[22]  -  WIDTH:*(int*)&info[18]
	data = new unsigned char[size];

	fread(data, sizeof(unsigned char), size, bmpFile);
	fclose(bmpFile);
}

void buildPixelMap() {
	int i = 0;
	vector<int> pixelvectorTemp((height * width), 0);
	pixelArrayToSend.data.clear();
	pixelArrayToSend.layout.dim.push_back(std_msgs::MultiArrayDimension());
	pixelArrayToSend.layout.dim.push_back(std_msgs::MultiArrayDimension());
	
	
	
	for (int a = height; a > 0; a--) {
		for (int q = 0; q < width; q++) {
			if ((int(data[i] & 0xFF) + int(data[i + 1] & 0xFF) + int(data[i + 2] & 0xFF)) > 0) {
				pixelvectorTemp[a*width+q] = 0;
			}
			else {
				pixelvectorTemp[a*width+q] = 1;
				}
			i = i + 3;
		}
		ros::Duration(0.1).sleep();
	}
	
		
	
	pixelArrayToSend.data = pixelvectorTemp;
	pixelVector = pixelvectorTemp;

}

void buildClusterMap() {
/*
ofstream outfile;
	outfile.open("/home/chris/Desktop/info.txt", std::ios_base::app);
	string line = "";
for (int a = 0; a < height; a++) {
		for (int q = 0; q < width; q++) {
			outfile << pixelVector[a*width+q];
		}
		outfile<<endl;
	}
*/
	int pixelSum = 0;
	vector<int> clustervectorTemp((36), 0);
	for (int z = 0; z <6; z++) {
		for (int q = 0; q < 6; q++) { 
			for (int i = 0; i < 50; i++) {
				for (int j = 0; j < 50; j++) {
					pixelSum += pixelVector[(i*width)+ ((z*50)*width) + (j+(q*50))];
					/*if(pixelVector[(i*width)+ ((z*50)*width) + (j+(q*50))]==1){
					//ROS_INFO(" Y%d - X%d  pixel Fill: %d", i, j, pixelVector[(i*z)*width + (j*q)]);}*/
				}
			}
			if (pixelSum > 625) {
				clustervectorTemp[(z) * 6 + q] = 1;
			}
			else {
				clustervectorTemp[(z) * 6 + q] = 0;
			}
			ROS_INFO(" Y%d - X%d  Cluster Fill: %d", z, q, clustervectorTemp[(z) * 6 + q]);
			pixelSum = 0;
		}
	}
	clusterArrayToSend.data = clustervectorTemp;
	clusterVector = clustervectorTemp;
}

int main(int argc, char **argv) {
	ros::init(argc, argv, "publiserMap");
	ros::NodeHandle n;
	ros::Publisher pubPixel = n.advertise<std_msgs::Int32MultiArray>("pixelMap", 100);
	ros::Publisher pubCluster = n.advertise<std_msgs::Int32MultiArray>("clusterMap", 100);
	ros::Rate r(1);

	readFile(); // < Aanroepen van functie die de bitmap file gaat uitlezen en de data naar deze Node haalt.

	while (ros::ok()) {
		ROS_INFO("Building Pixel Map...");
		buildPixelMap(); // < Aanroepen van functie die de bitmap data uitleest en vervolgens deze data naar een 2D array schrijft.

		ROS_INFO("Building Cluster Map...");
		buildClusterMap();

		//ROS_INFO("Publishing Maps!");
		//pubPixel.publish(pixelArrayToSend);
		//pubCluster.publish(clusterArrayToSend);

		ROS_INFO("Both maps published!");

		ros::Duration(10.0).sleep(); // < Sleep aanroepen om extreme spam te voorkomen...
		ros::spinOnce();
	}
	return 0;
}
